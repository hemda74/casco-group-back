generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id                      String                          @id @default(uuid())
  name                    String
  userId                  String
  billboards              Billboard[]                     @relation("StoreToBillboard")
  coursescategories       CoursesCategory[]               @relation("StoreToCategory")
  servicescategories      ServicesCategory[]              @relation("StoreToCategory")
  industriescategories    IndustryCategory[]              @relation("StoreToCategory")
  courses                 Course[]                        @relation("StoreToCourse")
  Services                Service[]                       @relation("StoreToService")
  Industries              Industry[]                      @relation("StoreToIndustry")
  colors                  Color[]                         @relation("StoreToColor")
  currences               Currency[]                      @relation("StoreToCurrency")
  orders                  Order[]                         @relation("StoreToOrder")
  casestudies             CaseStudy[]                     @relation("StoreToCaseStudy")
  expert                  Expert[]                        @relation("StoreToExpert")
  team                    Team[]                          @relation("StoreToTeam")
  createdAt               DateTime                        @default(now())
  updatedAt               DateTime                        @updatedAt
 //sizes                  Size[]                          @relation("StoreToSize")
}
model Billboard {
  id                        String                @id @default(uuid())
  storeId                   String
  store                     Store                 @relation("StoreToBillboard", fields: [storeId], references: [id])
  label                     String
  label_ar                  String
  coursescategories         CoursesCategory[]
  servicescategories        ServicesCategory[]
  industriescategories      IndustryCategory[]
  teams                      Team[]
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt

  @@index([storeId])
}
model CoursesCategory {
  id                String    @id @default(uuid())
  storeId           String // Foreign Key to Store
  store             Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId       String // Foreign Key to Billboard
  billboard         Billboard @relation(fields: [billboardId], references: [id])
  name              String
  name_ar           String
  courses           Course[] @relation("CategoryToCourse")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}
model Team {
 id               String @id @default(uuid())
 storeId          String 
 store            Store   @relation("StoreToTeam",fields: [storeId],references: [id])
 billboardId      String
 name             String
 name_ar          String
 image            Image4[]
 billboard         Billboard @relation(fields: [billboardId],references: [id])
 @@index([storeId])
 @@index([billboardId])
}
model IndustryCategory {
  id                String    @id @default(uuid())
  storeId           String // Foreign Key to Store
  store             Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId       String // Foreign Key to Billboard
  billboard         Billboard @relation(fields: [billboardId], references: [id])
  name              String
  name_ar           String
  industries        Industry[] @relation("CategoryToIndustry")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}
model ServicesCategory {
  id                String    @id @default(uuid())
  storeId           String // Foreign Key to Store
  store             Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId       String // Foreign Key to Billboard
  billboard         Billboard @relation(fields: [billboardId], references: [id])
  name              String
  name_ar           String
  service           Service[] @relation("CategoryToService")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}
model Course {
  id                       String       @id @default(uuid())
  storeId                  String // Foreign Key to Store
  store                    Store       @relation("StoreToCourse", fields: [storeId], references: [id])
  categoryId               String // Foreign Key to Category
  category                 CoursesCategory    @relation("CategoryToCourse", fields: [categoryId], references: [id])
  name                     String @db.LongText
  name_ar                  String @db.LongText
  price                    Decimal
  images                   Image[] // Relation to Image model
  intro                    String @db.LongText
  intro_ar                 String @db.LongText
  duaration                String @db.LongText
  duration_ar              String @db.LongText
  who_sh_att               String @db.LongText
  who_sh_att_ar            String @db.LongText
  c_obje                   String @db.LongText
  c_obje_ar                String @db.LongText
  c_content                String @db.LongText
  c_content_ar             String @db.LongText
  wh_we_bnfi               String @db.LongText
  wh_we_bnfi_ar            String @db.LongText
  c_in_house               String @db.LongText
  c_in_house_ar            String @db.LongText
  delv_and_leaders         String @db.LongText
  delv_and_leaders_ar      String @db.LongText
  date_and_rev_1           String @db.LongText
  date_and_rev_2           String @db.LongText
  date_and_rev_3           String @db.LongText
  date_and_rev_4           String @db.LongText
  date_and_rev_5           String @db.LongText
  date_and_rev_6           String @db.LongText
  certification            String @db.LongText
  // isFeatured Boolean     @default(false)
  // isArchived Boolean     @default(false)
  // sizeId           String // Foreign Key to Size
  // size       Size        @relation(fields: [sizeId], references: [id])
  // colorId          String // Foreign Key to Color
  // color      Color       @relation(fields: [colorId], references: [id])
  // orderItems OrderItem[] // Relation to Order model
  // createdAt  DateTime    @default(now())
  // updatedAt  DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
  // @@index([sizeId])
  // @@index([colorId])
}

 model Service {
   id                       String       @id @default(uuid())
   storeId                  String   //Foreign Key to Store
   store                    Store       @relation("StoreToService", fields: [storeId], references: [id])
   categoryId               String  // Foreign Key to Category
   category                 ServicesCategory    @relation("CategoryToService", fields: [categoryId], references: [id])
   name                     String @db.LongText
   name_ar                  String @db.LongText
   title_1                  String @db.LongText
   explanation_1_1           String @db.LongText
   explanation_1_2           String @db.LongText
   title_2                  String @db.LongText
    explanation_2_1           String @db.LongText
   explanation_2_2           String @db.LongText
   title_3                  String @db.LongText
     explanation_3_1           String @db.LongText
   explanation_3_2           String @db.LongText
   title_4                  String @db.LongText
   explanation_4_1           String @db.LongText
   explanation_4_2           String @db.LongText
    title_1_ar                  String @db.LongText
   explanation_1_1_ar           String @db.LongText
   explanation_1_2_ar           String @db.LongText
   title_2_ar                  String @db.LongText
    explanation_2_1_ar           String @db.LongText
   explanation_2_2_ar           String @db.LongText
   title_3_ar                  String @db.LongText
  explanation_3_1_ar           String @db.LongText
   explanation_3_2_ar           String @db.LongText
   title_4_ar                  String @db.LongText
   explanation_4_1_ar           String @db.LongText
   explanation_4_2_ar           String @db.LongText
  expert                          Expert[] @relation("ExpertToService")
   @@index([storeId])
  @@index([categoryId])
//   // @@index([sizeId])
//   // @@index([colorId])
}
 model Industry {
   id                       String              @id @default(uuid())
   storeId                  String   //Foreign Key to Store
   store                    Store               @relation("StoreToIndustry", fields: [storeId], references: [id])
   categoryId               String  // Foreign Key to Category
   category                 IndustryCategory    @relation("CategoryToIndustry", fields: [categoryId], references: [id])
   casestudy                CaseStudy[]         @relation("IndustryToCaseStudy")
   expert                   Expert[]            @relation("ExpertToIndustry")
   name                     String              @db.LongText
   name_ar                  String              @db.LongText
   title_1                  String              @db.LongText
   explanation_1            String              @db.LongText
   title_2                  String              @db.LongText
   explanation_2            String              @db.LongText
   title_3                  String              @db.LongText
   explanation_3            String              @db.LongText
   @@index([storeId])
   @@index([categoryId])
//   // @@index([sizeId])
//   // @@index([colorId])
}
model Currency {
  id              String    @id @default(uuid())
  storeId         String // Foreign Key to Store
  store           Store     @relation("StoreToCurrency", fields: [storeId], references: [id])
  name            String
  name_ar         String
  value           String
  // courses  course[] // Relation to course model
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  @@index([storeId])
}
model CaseStudy {
  id              String    @id @default(uuid())
  storeId         String // Foreign Key to Store
  store           Store     @relation("StoreToCaseStudy", fields: [storeId], references: [id])
  name            String
  name_ar         String
  industryId      String // Foreign Key to Industry
  industry        Industry  @relation("IndustryToCaseStudy",fields: [industryId],references: [id])
  sub_title       String
  sub_title_ar       String
  onerole_1          String  @db.LongText 
  onerole_2          String  @db.LongText
  onerole_3          String  @db.LongText
  onerole_1_ar          String  @db.LongText
  onerole_2_ar          String  @db.LongText
  onerole_3_ar          String  @db.LongText
  result_1             String  @db.LongText
  result_2 String  @db.LongText
  result_3 String  @db.LongText 
  result_4 String  @db.LongText
  result_1_ar             String  @db.LongText
 result_2_ar String  @db.LongText
 result_3_ar String  @db.LongText 
 result_4_ar String  @db.LongText
 brief_1  String  @db.LongText
 brief_2 String  @db.LongText
 brief_1_ar  String  @db.LongText
 brief_2_ar String  @db.LongText
 image    Image3[]
  @@index([storeId])
  @@index([industryId])
}


model Order {
  id              String      @id @default(uuid())
  storeId         String // Foreign Key to Store
  store           Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems      OrderItem[] // Relation to OrderItem model
  isPaid          Boolean     @default(false)
  phone           String      @default("")
  address         String      @default("")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id              String  @id @default(uuid())
  orderId         String // Foreign Key to Order
  order           Order   @relation(fields: [orderId], references: [id])
  courseId        String // Foreign Key to course
  // course   course @relation(fields: [courseId], references: [id])
  @@index([orderId])
  @@index([courseId])
}
model Color {
  id              String    @id @default(uuid())
  storeId         String // Foreign Key to Store
  store           Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name            String
  name_ar         String
  value           String
  // courses  course[] // Relation to course model
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([storeId])
}
model Image {
  id              String   @id @default(uuid())
  courseId        String
  course          Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  url             String // URL of the image
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  @@index([courseId])
}
 model Expert{
  id              String    @id @default(uuid())
  storeId         String // Foreign Key to Store
  store           Store     @relation("StoreToExpert", fields: [storeId], references: [id])
  serviceId       String // Foreign Key to Service 
  industryId       String // Foreign Key to Industry 
  service           Service    @relation("ExpertToService", fields: [serviceId], references: [id])
  idustry           Industry    @relation("ExpertToIndustry", fields: [industryId], references: [id])
  name            String
  name_ar         String
  bio             String    @db.LongText
  bio_ar          String    @db.LongText
  mail            String
  phone           String
  images          Image2[]
  @@index([storeId])
  @@index([serviceId])
  @@index([industryId])
 }
model Image2 {
  id                    String   @id @default(uuid())
  expertId     String
  expert      Expert  @relation(fields: [expertId], references: [id], onDelete: Cascade)
  url                   String // URL of the image
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  @@index([expertId])
}
model Image3 {
  id                    String   @id @default(uuid())
  casestudyId     String
  casestudy      CaseStudy  @relation(fields: [casestudyId], references: [id], onDelete: Cascade)
  url                   String // URL of the image
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  @@index([casestudyId])
}

model Image4 {
  id                    String   @id @default(uuid())
  teamId     String
  team      Team  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  url                   String // URL of the image
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  @@index([teamId])
}
// model Size {
//   id             String    @id @default(uuid())
//   storeId        String // Foreign Key to Store
//   store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
//   name           String
//   name_ar        String
//   value          String
//   courses  course[] // Relation to course model
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt

//   @@index([storeId])
// }